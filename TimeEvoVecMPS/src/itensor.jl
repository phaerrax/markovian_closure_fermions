# some extensions for ITensors functionality
# the goal is to eventually contribute these upstream if found appropriate

export growbond!, bondconvergencemeasure, adaptbonddimensions!

function findprimeinds(is::IndexSet, plevel::Int=-1)
    if plevel>=0
        return filter(x->plev(x)==plevel, is)
    else
        return filter(x->plev(x)>0, is)
    end
end

findprimeinds(A::ITensor,args...) = findprimeinds(A.inds,args...)

function isleftortho(M,i)
    i==length(M) && return true
    L = M[i]*prime(dag(M[i]), i==1 ? "Link" : commonindex(M[i],M[i+1]))
    l = linkindex(M,i)
    return norm(L-delta(l,l')) < 1E-12
end

function isrightortho(M,i)
    i==1 && return true
    R = M[i]*prime(dag(M[i]),i==length(M) ? "Link" : commonindex(M[i],M[i-1]))
    r = linkindex(M,i-1)
    return norm(R-delta(r,r')) < 1E-12
end

function reorthogonalize!(psi::MPS)
    ITensors.setleftlim!(psi,-1)
    ITensors.setrightlim!(psi,length(psi)+2)
    orthogonalize!(psi,1)
    psi[1] /= sqrt(inner(psi,psi))
end

"""
    growbond!(v::MPS, bond::Integer; increment::Integer=1)

Grow the bond dimension of the MPS `v` between sites `bond` and `bond+1` by `increment`.
Return the new bond dimension.
"""
function growbond!(v::MPS, bond::Integer; increment::Integer=1)::Integer
    bond_index = commonind(v[bond], v[bond + 1])
    current_bonddim = ITensors.dim(bond_index)
    aux = Index(current_bonddim + increment; tags=tags(bond_index))
    v[bond] = v[bond] * delta(bond_index, aux)
    v[bond + 1] = v[bond + 1] * delta(bond_index, aux)
    return current_bonddim + increment
end

"""
    bondconvergencemeasure(PH::TrackerProjMPO, state::MPS, bond::Integer)

Return a measure of the convergence for the bond dimension on the bond (`bond`, `bond+1`)
of the MPS `state` for a time-evolution determined by `PH`. See [1] for details.

# References:
[1] Dunnett, Angus J. and Chin, Alex W. (2020).
“Dynamically Evolving Bond-Dimensions within the one-site
Time-Dependent-Variational-Principle method for Matrix Product States: Towards efficient
simulation of non-equilibrium open quantum dynamics”
https://doi.org/10.48550/arXiv.2007.13528
"""
function bondconvergencemeasure(PH::TrackerProjMPO, v::MPS, bond::Integer)::Real
    orthogonalize!(v, bond) # Just to make sure

    ITensors.set_nsite!(PH, 1)
    ITensors.position!(PH, v, bond)
    H1 = PH(v[bond])

    ITensors.set_nsite!(PH, 0)
    Q, R = factorize(v[bond], uniqueinds(v[bond], v[bond + 1]); ortho="left", which_decomp="qr")

    # We reuse Q and R to perform a sort of a manual reorthogonalization of the MPS.
    vv = copy(v)
    vv[bond] = Q
    vv[bond + 1] *= R

    ITensors.position!(PH, vv, bond + 1)
    K = PH(R)

    ITensors.set_nsite!(PH, 1)
    ITensors.position!(PH, vv, bond + 1) # Force recalculation of projections
    H2 = PH(vv[bond + 1])

    return norm(H1)^2 + norm(H2)^2 + norm(K)^2
end

"""
    function adaptbonddimensions!(
        v::MPS, PH::TrackerProjMPO, max_bond::Int, convergence_factor_bonddims::Real
    )

If necessary, enlarge the bond dimensions of the MPS `v`, so that it can dynamically and
inhomogeneously restructure itself as the complexity of the correlations grow during the
time evolution generated by `H` [1].

# References:
[1] Dunnett, Angus J. and Chin, Alex W. (2020).
“Dynamically Evolving Bond-Dimensions within the one-site
Time-Dependent-Variational-Principle method for Matrix Product States: Towards efficient
simulation of non-equilibrium open quantum dynamics”
https://doi.org/10.48550/arXiv.2007.13528
"""
function adaptbonddimensions!(
    v::MPS, PH::TrackerProjMPO, max_bond::Int, convergence_factor_bonddims::Real
)
    for bond in 1:(length(v) - 1)
        if linkdim(v, bond) < max_bond
            # Skip all this if the bond is already at (or above!) the maximum
            # allowed value.
            f = bondconvergencemeasure(PH, v, bond)
            while true # (do-while block emulation)
                # Increase the bond dimension by 1, check convergence, repeat if needed.
                vcopy = copy(v)
                new_bonddim = growbond!(vcopy, bond)
                new_f = bondconvergencemeasure(PH, vcopy, bond)

                # If new_f / f ≈ 1, within the given threshold, then f was already OK
                # and we discard the new MPS, keeping the non-enlarged state.
                if (new_f / f - 1 > convergence_factor_bonddims && new_bonddim < max_bond)
                    growbond!(v, bond)
                    d = linkdim(v, bond)
                    @debug "[Bond ($bond,$(bond+1))] f($d)/f($(d-1)) - 1 > " *
                        "$convergence_factor_bonddims: increasing dimension to $d."
                    f = new_f # and begin a new iteration of the while block.
                else
                    @debug "[Bond ($bond,$(bond+1))] Convergence reached for now."
                    break # and proceed with the next bond in the MPS.
                end
            end
        else
            @debug "[Bond ($bond,$(bond+1))] Max dimension reached. Skipping."
        end
    end
    return nothing
end
